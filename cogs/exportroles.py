import discord
from discord.ext import commands
from discord import app_commands
import logging
from datetime import datetime
import io

logger = logging.getLogger(__name__)

class ExportRoles(commands.Cog):
    def __init__(self, bot):
        self.bot = bot
        self.OWNER_ID = 486652069831376943

    def is_owner(self, user_id: int) -> bool:
        """Check if the user is the bot owner"""
        return user_id == self.OWNER_ID

    def format_permissions(self, permissions: discord.Permissions) -> str:
        """Format permissions into a readable string"""
        if permissions.administrator:
            return "Administrator (All Permissions)"
        
        # Get all enabled permissions
        enabled_perms = [perm.replace('_', ' ').title() for perm, value in permissions if value]
        
        if not enabled_perms:
            return "No Special Permissions"
        
        # Group similar permissions for better readability
        return ", ".join(enabled_perms)

    def format_role_info(self, role: discord.Role) -> str:
        """Format a single role's information"""
        # Basic information
        info_lines = [
            f"{'='*60}",
            f"Role Name: {role.name}",
            f"Role ID: {role.id}",
            f"Position: {role.position}",
            f"Color: {str(role.color)} ({role.color.value})",
            f"Hoisted (Displayed Separately): {'Yes' if role.hoist else 'No'}",
            f"Mentionable: {'Yes' if role.mentionable else 'No'}",
            f"Managed by Integration: {'Yes' if role.managed else 'No'}",
            f"Created At: {role.created_at.strftime('%Y-%m-%d %H:%M:%S UTC')}",
            f"Member Count: {len(role.members)}",
        ]
        
        # Add role icon if it exists
        if role.icon:
            info_lines.append(f"Role Icon: {role.icon.url}")
        
        # Add permissions
        info_lines.extend([
            f"Permissions: {self.format_permissions(role.permissions)}",
            ""
        ])
        
        # Add members if any
        if role.members:
            info_lines.append("Members with this role:")
            for member in sorted(role.members, key=lambda m: m.display_name.lower()):
                info_lines.append(f"  - {member.display_name} ({member.name}#{member.discriminator}) [ID: {member.id}]")
        else:
            info_lines.append("No members have this role.")
        
        info_lines.append("")
        return "\n".join(info_lines)

    @app_commands.command(name="exportroles", description="Export all server roles information to a text file (Owner only)")
    async def export_roles(self, interaction: discord.Interaction):
        """Export all roles information to a text file"""
        
        # Check if user is the bot owner
        if not self.is_owner(interaction.user.id):
            await interaction.response.send_message(
                "❌ This command can only be used by the bot owner.", 
                ephemeral=True
            )
            return

        # Defer the response as this might take a moment
        await interaction.response.defer(ephemeral=True)

        try:
            guild = interaction.guild
            roles = sorted(guild.roles, key=lambda r: r.position, reverse=True)
            
            # Create the export content
            export_lines = [
                f"ROLES EXPORT FOR {guild.name.upper()}",
                f"Server ID: {guild.id}",
                f"Export Date: {datetime.utcnow().strftime('%Y-%m-%d %H:%M:%S UTC')}",
                f"Total Roles: {len(roles)}",
                f"Generated by: {interaction.user.display_name} ({interaction.user.id})",
                "="*80,
                "",
                "ROLES OVERVIEW:",
                "-" * 40,
            ]
            
            # Add quick overview
            for i, role in enumerate(roles, 1):
                member_count = len(role.members)
                color_hex = f"#{role.color.value:06x}" if role.color.value else "#000000"
                export_lines.append(
                    f"{i:2d}. {role.name:<30} | ID: {role.id} | Members: {member_count:3d} | Color: {color_hex}"
                )
            
            export_lines.extend(["", "="*80, "", "DETAILED ROLE INFORMATION:", ""])
            
            # Add detailed information for each role
            for role in roles:
                export_lines.append(self.format_role_info(role))
            
            # Add summary statistics
            export_lines.extend([
                "="*80,
                "SUMMARY STATISTICS:",
                "-" * 40,
                f"Total Roles: {len(roles)}",
                f"Roles with Members: {len([r for r in roles if r.members])}",
                f"Empty Roles: {len([r for r in roles if not r.members])}",
                f"Hoisted Roles: {len([r for r in roles if r.hoist])}",
                f"Mentionable Roles: {len([r for r in roles if r.mentionable])}",
                f"Managed Roles: {len([r for r in roles if r.managed])}",
                f"Roles with Administrator Permission: {len([r for r in roles if r.permissions.administrator])}",
                "",
                f"Export completed at: {datetime.utcnow().strftime('%Y-%m-%d %H:%M:%S UTC')}"
            ])
            
            # Convert to string and create file
            export_content = "\n".join(export_lines)
            file_buffer = io.BytesIO(export_content.encode('utf-8'))
            
            # Generate filename with timestamp
            filename = f"roles_export_{guild.name}_{datetime.utcnow().strftime('%Y%m%d_%H%M%S')}.txt"
            # Clean filename of invalid characters
            filename = "".join(c for c in filename if c.isalnum() or c in "._- ")
            
            # Create Discord file object
            discord_file = discord.File(file_buffer, filename=filename)
            
            # Send the file
            embed = discord.Embed(
                title="✅ Roles Export Complete",
                description=f"Successfully exported {len(roles)} roles from **{guild.name}**",
                color=discord.Color.green(),
                timestamp=datetime.utcnow()
            )
            embed.add_field(name="File Size", value=f"{len(export_content):,} characters", inline=True)
            embed.add_field(name="Total Roles", value=str(len(roles)), inline=True)
            embed.add_field(name="Roles with Members", value=str(len([r for r in roles if r.members])), inline=True)
            
            await interaction.followup.send(
                embed=embed,
                file=discord_file,
                ephemeral=True
            )
            
            logger.info(f"Roles exported successfully for guild {guild.name} ({guild.id}) by user {interaction.user.id}")
            
        except Exception as e:
            logger.exception(f"Error exporting roles: {e}")
            
            error_embed = discord.Embed(
                title="❌ Export Failed",
                description="An error occurred while exporting roles. Please try again later.",
                color=discord.Color.red()
            )
            
            await interaction.followup.send(embed=error_embed, ephemeral=True)

async def setup(bot):
    await bot.add_cog(ExportRoles(bot))
